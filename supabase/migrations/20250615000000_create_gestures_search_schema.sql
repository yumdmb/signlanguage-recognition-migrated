-- 1. Create gesture_categories table
CREATE TABLE IF NOT EXISTS public.gesture_categories (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    icon text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- 2. Create gestures table
CREATE TABLE IF NOT EXISTS public.gestures (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    description text,
    media_url text NOT NULL,
    media_type text NOT NULL CHECK (media_type IN ('image', 'video')),
    language text NOT NULL CHECK (language IN ('ASL', 'MSL')),
    category_id bigint REFERENCES public.gesture_categories(id) ON DELETE SET NULL,
    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- 3. Set up RLS
ALTER TABLE public.gesture_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.gestures ENABLE ROW LEVEL SECURITY;

-- 4. Create policies for gesture_categories
DROP POLICY IF EXISTS "Enable read access for all users" ON public.gesture_categories;
CREATE POLICY "Enable read access for all users" ON public.gesture_categories
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable admin full access" ON public.gesture_categories;
CREATE POLICY "Enable admin full access" ON public.gesture_categories
  FOR ALL USING (EXISTS (SELECT 1 FROM public.user_profiles WHERE id = auth.uid() AND role = 'admin'));

-- 5. Create policies for gestures
DROP POLICY IF EXISTS "Enable read access for all users" ON public.gestures;
CREATE POLICY "Enable read access for all users" ON public.gestures
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable insert for authenticated users" ON public.gestures;
CREATE POLICY "Enable insert for authenticated users" ON public.gestures
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');

DROP POLICY IF EXISTS "Enable update for owners" ON public.gestures;
CREATE POLICY "Enable update for owners" ON public.gestures
  FOR UPDATE USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Enable delete for owners" ON public.gestures;
CREATE POLICY "Enable delete for owners" ON public.gestures
  FOR DELETE USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Enable admin full access" ON public.gestures;
CREATE POLICY "Enable admin full access" ON public.gestures
  FOR ALL USING (EXISTS (SELECT 1 FROM public.user_profiles WHERE id = auth.uid() AND role = 'admin'));

-- 7. Create function to handle updated_at
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 8. Create trigger for updated_at on gestures table
DROP TRIGGER IF EXISTS on_gestures_updated ON public.gestures;
CREATE TRIGGER on_gestures_updated
  BEFORE UPDATE ON public.gestures
  FOR EACH ROW
  EXECUTE PROCEDURE public.handle_updated_at();

-- 9. Create storage bucket for gesture media
INSERT INTO storage.buckets (id, name, public)
VALUES ('gestures', 'gestures', true)
ON CONFLICT (id) DO NOTHING;

-- 10. Create storage policies
DROP POLICY IF EXISTS "Enable read access for all users" ON storage.objects;
CREATE POLICY "Enable read access for all users" ON storage.objects
  FOR SELECT USING (bucket_id = 'gestures');

DROP POLICY IF EXISTS "Enable insert for authenticated users" ON storage.objects;
CREATE POLICY "Enable insert for authenticated users" ON storage.objects
  FOR INSERT WITH CHECK (bucket_id = 'gestures' AND auth.role() = 'authenticated');

DROP POLICY IF EXISTS "Enable update for owners" ON storage.objects;
CREATE POLICY "Enable update for owners" ON storage.objects
  FOR UPDATE USING (bucket_id = 'gestures' AND owner = auth.uid());

DROP POLICY IF EXISTS "Enable delete for owners" ON storage.objects;
CREATE POLICY "Enable delete for owners" ON storage.objects
  FOR DELETE USING (bucket_id = 'gestures' AND owner = auth.uid());

DROP POLICY IF EXISTS "Enable admin full access" ON storage.objects;
CREATE POLICY "Enable admin full access" ON storage.objects
  FOR ALL USING (bucket_id = 'gestures' AND EXISTS (SELECT 1 FROM public.user_profiles WHERE id = auth.uid() AND role = 'admin'));

-- 11. Add some sample data
INSERT INTO public.gesture_categories (name, icon) VALUES
('Common Phrases', 'üëã'),
('Greetings', 'ü§ù'),
('Questions', '‚ùì'),
('Emotions', 'üòä'),
('Numbers', 'üî¢'),
('Alphabet', 'üî§')
ON CONFLICT DO NOTHING;